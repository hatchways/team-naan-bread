#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app').app;
var http = require('http');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('../app').server;

const io = require('socket.io')(server);

//Middleware to authenticate socket
const authSocket = async (socket, next) => {
  const auth = socket.handshake.auth;
  const token = socket.handshake.headers.cookie.split('=')[1];
  console.log(`token ${JSON.stringify(token)}`);
  const { username } = auth;
  if (!token) {
    return res.status(401).send('No token, authorization denied');
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    socket.user = auth.username;
    socket.id = decoded.id;
    const user = await User.findById(socket.id);
    console.log(`user ${user}`);
    next();
  } catch (err) {
    res.status(401).send('Token is not valid');
    next();
  }
  return next();
};

io.use(authSocket);

io.on('connection', (socket) => {
  socket.send('Hello!');
  socket.on('go-online', (id) => {
    if (!onlineUsers.has(id)) {
      onlineUsers.add(id);
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit('add-online-user', id);
    console.log(`Online user ${JSON.stringify(socket.user)}`);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log(`Listening on ${bind}`.red.underline.bold);
}
